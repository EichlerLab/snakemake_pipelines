import pandas as pd
import os

manifest_df = pd.read_csv("manifest.tab", sep="\t").fillna("NA")
manifest_df["MOVIE"] = manifest_df.apply(
    lambda row: os.path.basename(row["BAM"]).split(".")[0]
    if row["TYPE"] == "ccs"
    else os.path.basename(row["BAM"]).split(".")[0].replace("r", "m", 1),
    axis=1,
)
manifest_df["MOVIE"] = manifest_df.apply(
    lambda row: row["MOVIE"]
    if row["BC"] == "NA"
    else "-".join([row["MOVIE"], row["BC"]]),
    axis=1,
)
manifest_df = manifest_df.set_index(["SAMPLE", "MOVIE"]).drop_duplicates()

SNAKEMAKE_DIR = os.path.realpath(os.path.dirname(srcdir("Snakefile")))


NCHUNKS = config.get("nchunks", 10)
BARCODES = f"{SNAKEMAKE_DIR}/barcodes/SMRTbell_adapter_indexes.fasta"


scattergather:
    split=NCHUNKS,


def find_bam(wildcards):
    if manifest_df.loc[(wildcards.sample, wildcards.movie), "TYPE"] == "ccs":
        return manifest_df.loc[(wildcards.sample, wildcards.movie), "BAM"]
    elif manifest_df.loc[(wildcards.sample, wildcards.movie), "BC"] == "NA":
        return rules.combine_parts.output.hifi_bam
    else:
        return rules.lima_split.output.bam


def find_subreads(wildcards):
    return manifest_df.loc[(wildcards.sample, wildcards.movie), "BAM"]


def find_barcode(wildcards):
    return manifest_df.loc[(wildcards.sample, wildcards.movie), "BC"]


def find_reads(wildcards):
    barcode_df = manifest_df.loc[manifest_df["BC"] != "NA"].copy()
    no_barcode_df = manifest_df.loc[manifest_df["BC"] == "NA"].copy()
    barcode_out = expand(
        "{sample}/raw_data/PacBio_HiFi/demux/{movie}.reads.bam",
        zip,
        sample=barcode_df.index.get_level_values("SAMPLE"),
        movie=barcode_df.index.get_level_values("MOVIE"),
    )
    no_barcode_out = expand(
        "{sample}/raw_data/PacBio_HiFi/{movie}.reads.bam",
        zip,
        sample=no_barcode_df.index.get_level_values("SAMPLE"),
        movie=no_barcode_df.index.get_level_values("MOVIE"),
    )
    return no_barcode_out + barcode_out


wildcard_constraints:
    sample="|".join(manifest_df.index.get_level_values("SAMPLE").unique()),
    movie="|".join(manifest_df.index.get_level_values("MOVIE").unique()),


localrules:
    all,
    reads_only,


rule all:
    input:
        expand(
            "{sample}/raw_data/PacBio_HiFi/{movie}.hifi_reads.bam",
            zip,
            sample=manifest_df.index.get_level_values("SAMPLE"),
            movie=manifest_df.index.get_level_values("MOVIE"),
        ),


rule reads_only:
    input:
        find_reads,


rule ccs_parts:
    input:
        subread=find_subreads,
    output:
        bam_part=temp("temp/{sample}/{movie}/{part}.reads.bam"),
    resources:
        mem=lambda wildcards, attempt: attempt**2,
        hrs=24,
    threads: 8
    envmodules:
        "modules",
        "modules-init",
        "modules-gs/prod",
        "modules-eichler/prod",
        "pbconda/202307",
    conda:
        "envs/pbconda.yaml"
    shell:
        """
        ccs --all --chunk {wildcards.part}/{NCHUNKS} {input.subread} {resources.tmpdir}/$( basename {output.bam_part} )
        rsync -av {resources.tmpdir}/* $( dirname {output.bam_part} )
        """


rule combine_parts:
    input:
        bams=expand(
            "temp/{{sample}}/{{movie}}/{part}.reads.bam",
            part=range(1, NCHUNKS + 1),
        ),
    output:
        hifi_bam="{sample}/raw_data/PacBio_HiFi/{movie}.reads.bam",
    resources:
        mem=8,
        hrs=24,
    threads: 1
    envmodules:
        "modules",
        "modules-init",
        "modules-gs/prod",
        "modules-eichler/prod",
        "pbconda/202307",
    conda:
        "envs/pbconda.yaml"
    shell:
        """
        pbmerge -o {output.hifi_bam} {input.bams}
        """


rule lima_split:
    input:
        bam=rules.combine_parts.output.hifi_bam,
        barcodes=BARCODES,
    output:
        bam="{sample}/raw_data/PacBio_HiFi/demux/{movie}.reads.bam",
        barcode=temp("temp/{sample}/{movie}.fasta"),
    resources:
        mem=16,
        hrs=96,
    params:
        barcode=find_barcode,
    envmodules:
        "modules",
        "modules-init",
        "modules-gs/prod",
        "modules-eichler/prod",
        "samtools/1.12",
        "pbconda/202307",
    conda:
        "envs/pbconda.yaml"
    threads: 1
    shell:
        """
        samtools faidx {input.barcodes} {params.barcode} > {output.barcode}
        lima --hifi-preset SYMMETRIC {input.bam} {output.barcode} {output.bam}
        """


rule extract_hifi:
    input:
        bam=find_bam,
    output:
        bam="{sample}/raw_data/PacBio_HiFi/{movie}.hifi_reads.bam",
    resources:
        mem=8,
        hrs=96,
    envmodules:
        "modules",
        "modules-init",
        "modules-gs/prod",
        "modules-eichler/prod",
        "pbconda/202301",
    conda:
        "envs/pbconda.yaml"
    threads: 8
    shell:
        """
        extracthifi {input.bam} {output.bam}
        """
